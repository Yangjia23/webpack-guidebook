(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{201:function(e,t,a){"use strict";a.r(t);var r=a(0),v=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"babel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel","aria-hidden":"true"}},[e._v("#")]),e._v(" Babel")]),e._v(" "),a("p",[e._v("JavaScript 编译器 ES6 => ES5")]),e._v(" "),a("p",[a("strong",[e._v("使用 ES6 语言：")])]),e._v(" "),a("ul",[a("li",[e._v("将新的 ES6 语法用 ES5 实现，例如 ES6 的 class 语法用 ES5 的 prototype 实现")]),e._v(" "),a("li",[e._v("为新的 API 注入 polyfill，例如使用新的 fetch API 时在注入对应的 polyfill 后才能让低端浏览器运行")])]),e._v(" "),a("h2",{attrs:{id:"plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugins","aria-hidden":"true"}},[e._v("#")]),e._v(" Plugins")]),e._v(" "),a("p",[e._v("plugins 告诉 babel 使用哪些插件，这些插件可以控制如何转换代码。")]),e._v(" "),a("p",[e._v("以上配置文件里的 "),a("code",[e._v("transform-runtime")]),e._v(" 对应的插件全名叫作 "),a("code",[e._v("babel-plugin­-transform-runtime")]),e._v("，即在前面加上了 "),a("code",[e._v("babel-plugin-")]),e._v("。 要让 Babel 正常运行 ，我们必 须先安装这个插件:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i babel-plugin-transform-runtime --save-dev\n")])])]),a("p",[a("code",[e._v("babel-plugin-transform-runtime")]),e._v(" 是 Babel 官方提供的一个插件，作用是减少冗余的代码。")]),e._v(" "),a("p",[e._v("同时需要注意的是，由于 "),a("code",[e._v("babel-plugin-transform-runtime")]),e._v(" 注入了 "),a("code",[e._v("require ('babel-runtime/helpers/ extent')")]),e._v(" 语句到编译后的代码里，需要安装 "),a("code",[e._v("babel­ runtime")]),e._v(" 依赖到我们的项目后，代码才能正常运行 。 也就是说 "),a("code",[e._v("babel-plugin-transform­-runtime")]),e._v(" 和 "),a("code",[e._v("babel-runtime")]),e._v(" 需要配套使用，在使用 "),a("code",[e._v("babel-plugin-transform-runtime")]),e._v(" 后一定需要使用 "),a("code",[e._v("babel-runtime")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"presets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#presets","aria-hidden":"true"}},[e._v("#")]),e._v(" Presets")]),e._v(" "),a("p",[e._v("presets 属性告诉 Babel 要转换的源码使用了哪些新的语法特性，一个 Presets 对一组新语法的特性提供了支持，多个 Presets 可以叠加。 Presets 其实是 一 组 Plugins 的 集合，每个 Plugin 完成一个新语法的转换工作 。 Presets 是按照 ECMAScript 草案来组织的，通常可以分 为以下三 大类 。")]),e._v(" "),a("p",[a("strong",[e._v("年度标准")])]),e._v(" "),a("ul",[a("li",[e._v("ES2015 - 包含 2015 年加入的新特性")]),e._v(" "),a("li",[e._v("ES2016 - 包含 2016 年加入的新特性")]),e._v(" "),a("li",[e._v("ES2017 - 包含 2017 年加入的新特性")]),e._v(" "),a("li",[e._v("env - 包含当前所有 ECMAScript 标准的新特性")])]),e._v(" "),a("p",[a("strong",[e._v("被社区提出未写入标准")])]),e._v(" "),a("ul",[a("li",[e._v("stage0 一些 Babel 插件实现了对这些特性的支持，但是不确定是否会被定为标准")]),e._v(" "),a("li",[e._v("stage1 值得被纳入标准的特性")]),e._v(" "),a("li",[e._v("stage2 已被起草，将被纳入标准里")]),e._v(" "),a("li",[e._v("stage3 已定稿，各大浏览器厂商和 NodeJS 社区开始着手实现")]),e._v(" "),a("li",[e._v("stage4 在接下来一年会纳入标准")])]),e._v(" "),a("p",[a("strong",[e._v("支持特定场景的语法特征")])]),e._v(" "),a("ul",[a("li",[e._v("babel-plugin-react 支持 React 开发里的 JSX 语法")]),e._v(" "),a("li",[e._v("babel-plugin-import")])])])},[],!1,null,null,null);t.default=v.exports}}]);