(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{197:function(v,_,t){"use strict";t.r(_);var e=t(0),r=Object(e.a)({},function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"运行机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行机制","aria-hidden":"true"}},[v._v("#")]),v._v(" 运行机制")]),v._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[v._v("#")]),v._v(" 基本概念")]),v._v(" "),t("p",[v._v("在了解 Webpack 原理前，需要掌握以下几个核心概念，以方便后面的理解：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("entry")]),v._v("：入口，Webpack 执行构建的第一步将从 entry 开始，可抽象成输入。")]),v._v(" "),t("li",[t("strong",[v._v("module")]),v._v("：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 entry 开始递归找出所有依赖的模块。")]),v._v(" "),t("li",[t("strong",[v._v("chunk")]),v._v("：代码块，一个 chunk 由多个模块组合而成，用于"),t("strong",[v._v("代码合并与分割")]),v._v("。")]),v._v(" "),t("li",[t("strong",[v._v("loader")]),v._v("：模块转换器，用于把模块原内容按照需求转换成新内容。")]),v._v(" "),t("li",[t("strong",[v._v("plugin")]),v._v("：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])]),v._v(" "),t("h2",{attrs:{id:"流程概括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程概括","aria-hidden":"true"}},[v._v("#")]),v._v(" 流程概括")]),v._v(" "),t("p",[v._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("初始化参数")]),v._v("：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数")]),v._v(" "),t("li",[t("strong",[v._v("开始编译")]),v._v("：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译")]),v._v(" "),t("li",[t("strong",[v._v("确定入口")]),v._v("：根据配置中的 entry 找出所有的入口文件")]),v._v(" "),t("li",[t("strong",[v._v("编译模块")]),v._v("：从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理")]),v._v(" "),t("li",[t("strong",[v._v("完成模块编译")]),v._v("：在经过第 4 步使用 loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系")]),v._v(" "),t("li",[t("strong",[v._v("输出资源")]),v._v("：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会")]),v._v(" "),t("li",[t("strong",[v._v("输出完成")]),v._v("：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])]),v._v(" "),t("p",[v._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),v._v(" "),t("h2",{attrs:{id:"流程细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程细节","aria-hidden":"true"}},[v._v("#")]),v._v(" 流程细节")]),v._v(" "),t("p",[v._v("Webpack 的构建流程可以分为以下三大阶段：")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("初始化")]),v._v("：启动构建，读取与合并配置参数，加载 plugin，实例化 Compiler。")]),v._v(" "),t("li",[t("strong",[v._v("编译")]),v._v("：从 entry 出发，针对每个 module 串行调用对应的 loader 去翻译文件内容，再找到该 module 依赖的 module，递归地进行编译处理。")]),v._v(" "),t("li",[t("strong",[v._v("输出")]),v._v("：对编译后的 module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。")])]),v._v(" "),t("p",[v._v("如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程将变为如下：")]),v._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("初始化")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("编译")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("输出")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("文件发生变化")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("编译")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("...")]),v._v("\n")])])]),t("p",[v._v("在每个大阶段中又会发生很多事件，Webpack 会把这些事件"),t("strong",[v._v("广播")]),v._v("出来供给 Plugin 使用。")]),v._v(" "),t("h2",{attrs:{id:"初始化阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段","aria-hidden":"true"}},[v._v("#")]),v._v(" 初始化阶段")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("事件名")]),v._v(" "),t("th",[v._v("解释")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("初始化参数")]),v._v(" "),t("td",[v._v("从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句  "),t("code",[v._v("new xxxPlugin()")]),v._v("。")])]),v._v(" "),t("tr",[t("td",[v._v("实例化 "),t("code",[v._v("Compiler")])]),v._v(" "),t("td",[v._v("用上一步得到的参数初始化  "),t("code",[v._v("Compiler")]),v._v("  实例，"),t("code",[v._v("Compiler")]),v._v("  负责"),t("strong",[v._v("文件监听")]),v._v("和"),t("strong",[v._v("启动编译")]),v._v("。"),t("code",[v._v("Compiler")]),v._v("  实例中包含了完整的  "),t("code",[v._v("Webpack")]),v._v("  配置，全局只有一个  "),t("code",[v._v("Compiler")]),v._v("  实例。")])]),v._v(" "),t("tr",[t("td",[v._v("加载插件")]),v._v(" "),t("td",[v._v("依次调用插件的 "),t("code",[v._v("apply")]),v._v(" 方法，让插件可以监听后续的所有事件节点。同时给插件传入 "),t("code",[v._v("compiler")]),v._v(" 实例的引用，以方便插件通过 "),t("code",[v._v("compiler")]),v._v(" 调用 Webpack 提供的 API。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("environment")])]),v._v(" "),t("td",[v._v("开始应用 Node.js 风格的文件系统到 compiler 对象，以方便后续的文件寻找和读取。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("entry-option")])]),v._v(" "),t("td",[v._v("读取配置的  "),t("code",[v._v("entrys")]),v._v("，为每个  "),t("code",[v._v("entry")]),v._v("  实例化一个对应的  "),t("code",[v._v("EntryPlugin")]),v._v("，为后面该  "),t("code",[v._v("entry")]),v._v("  的递归解析工作做准备。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("after-plugins")])]),v._v(" "),t("td",[v._v("调用完所有内置的和配置的插件的  "),t("code",[v._v("apply")]),v._v("  方法。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("after-resolvers")])]),v._v(" "),t("td",[v._v("根据配置初始化完  "),t("code",[v._v("resolver")]),v._v("，"),t("code",[v._v("resolver")]),v._v("  负责在文件系统中寻找指定路径的文件。")])])])]),v._v(" "),t("h2",{attrs:{id:"编译阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段","aria-hidden":"true"}},[v._v("#")]),v._v(" 编译阶段")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("事件名")]),v._v(" "),t("th",[v._v("解释")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("run")])]),v._v(" "),t("td",[v._v("启动一次新的编译。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("watch-run")])]),v._v(" "),t("td",[v._v("和  "),t("code",[v._v("run")]),v._v("  类似，区别在于它是在监听模式下启动的编译，在这个事件中可以获取到是哪些文件发生了变化导致重新启动一次新的编译。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("compile")])]),v._v(" "),t("td",[v._v("该事件是为了告诉插件一次新的编译将要启动，同时会给插件带上  "),t("code",[v._v("compiler")]),v._v("  对象。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("compilation")])]),v._v(" "),t("td",[v._v("当  "),t("code",[v._v("Webpack")]),v._v("  以开发模式运行时，每当检测到文件变化，一次新的  "),t("code",[v._v("Compilation")]),v._v("  将被创建。一个  "),t("code",[v._v("Compilation")]),v._v("  对象包含了当前的模块资源、编译生成资源、变化的文件等。"),t("code",[v._v("Compilation")]),v._v("  对象也提供了很多事件回调供插件做扩展。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("make")])]),v._v(" "),t("td",[v._v("一个新的  "),t("code",[v._v("Compilation")]),v._v("  创建完毕，即将从  "),t("code",[v._v("Entry")]),v._v("  开始读取文件，根据文件类型和配置的  "),t("code",[v._v("Loader")]),v._v("  对文件进行编译，编译完后再找出该文件依赖的文件，递归的编译和解析。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("after-compile")])]),v._v(" "),t("td",[v._v("一次  "),t("code",[v._v("Compilation")]),v._v("  执行完成。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("invalid")])]),v._v(" "),t("td",[v._v("当遇到文件不存在、文件编译错误等异常时会触发该事件，该事件不会导致 Webpack 退出。")])])])]),v._v(" "),t("p",[v._v("在编译阶段中，最重要的要数  "),t("code",[v._v("compilation")]),v._v("  事件了，因为在  "),t("code",[v._v("compilation")]),v._v("  阶段调用了 Loader 完成了每个模块的转换操作，在  "),t("code",[v._v("compilation")]),v._v("  阶段又包括很多小的事件，它们分别是：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("事件名")]),v._v(" "),t("th",[v._v("解释")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("build-module")])]),v._v(" "),t("td",[v._v("使用对应的 Loader 去转换一个模块。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("normal-module-loader")])]),v._v(" "),t("td",[v._v("在用 Loader 对一个模块转换完后，使用  "),t("code",[v._v("acorn")]),v._v("  解析转换后的内容，输出对应的抽象语法树（"),t("code",[v._v("AST")]),v._v("），以方便 Webpack 后面对代码的分析。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("program")])]),v._v(" "),t("td",[v._v("从配置的入口模块开始，分析其 AST，当遇到 require 等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("seal")])]),v._v(" "),t("td",[v._v("所有模块及其依赖的模块都通过 Loader 转换完成后，根据依赖关系开始生成 Chunk。")])])])]),v._v(" "),t("h2",{attrs:{id:"输出阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出阶段","aria-hidden":"true"}},[v._v("#")]),v._v(" 输出阶段")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("事件名")]),v._v(" "),t("th",[v._v("解释")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("should-emit")])]),v._v(" "),t("td",[v._v("所有需要输出的文件已经生成好，询问插件哪些文件需要输出，哪些不需要。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("emit")])]),v._v(" "),t("td",[v._v("确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出内容。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("after-emit")])]),v._v(" "),t("td",[v._v("文件输出完毕。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("done")])]),v._v(" "),t("td",[v._v("成功完成一次完成的编译和输出流程。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("failed")])]),v._v(" "),t("td",[v._v("如果在编译和输出流程中遇到异常导致 Webpack 退出时，就会直接跳转到本步骤，插件可以在本事件中获取到具体的错误原因。")])])])]),v._v(" "),t("hr"),v._v(" "),t("p",[t("strong",[v._v("参考资料：")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://taobaofed.org/blog/2016/09/09/webpack-flow/",target:"_blank",rel:"noopener noreferrer"}},[v._v("📝 细说 Webpack 之流程篇"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://www.open-open.com/lib/view/open1440685541810.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("📝 基于 Webpack 搭建前端工程解决方案探索"),t("OutboundLink")],1)])])])},[],!1,null,null,null);_.default=r.exports}}]);