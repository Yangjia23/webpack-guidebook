(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{202:function(e,r,t){"use strict";t.r(r);var a=t(0),v=Object(a.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"模块热更新原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块热更新原理","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块热更新原理")]),e._v(" "),t("ul",[t("li",[e._v("底部红色框是服务端，上部橙色框是浏览器端。")]),e._v(" "),t("li",[e._v("绿色方框是 Webpack 代码控制的区域。蓝色框是 webpack-dev-server 代码控制的区域，桃红色方框是文件系统，文件修改后的变化就发生在这，而青色方框是应用本身")])]),e._v(" "),t("p",[e._v("上图显示了我们修改代码到模块热更新完成的一个周期，通过深绿色的阿拉伯数字符号已经将 HMR 的整个过程标识了出来。")]),e._v(" "),t("ol",[t("li",[e._v("第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。")]),e._v(" "),t("li",[e._v("第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。")]),e._v(" "),t("li",[e._v("第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了"),t("a",{attrs:{href:"http://link.zhihu.com/?target=https%3A//webpack.js.org/configuration/dev-server/%23devserver-watchcontentbase",target:"_blank",rel:"noopener noreferrer"}},[e._v("devServer.watchContentBase"),t("OutboundLink")],1),e._v(" 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是"),t("strong",[e._v("浏览器刷新")]),e._v("，和 HMR 是两个概念。")]),e._v(" "),t("li",[e._v("第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 "),t("a",{attrs:{href:"http://link.zhihu.com/?target=https%3A//github.com/sockjs/sockjs-client",target:"_blank",rel:"noopener noreferrer"}},[e._v("sockjs"),t("OutboundLink")],1),e._v("（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 "),t("strong",[e._v("websocket 长连接")]),e._v("，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是"),t("strong",[e._v("新模块的 hash 值")]),e._v("，后面的步骤根据这一 hash 值来进行模块热替换。")]),e._v(" "),t("li",[e._v("webpack-dev-server / client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack / hot / dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。")]),e._v(" "),t("li",[e._v("HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。")]),e._v(" "),t("li",[e._v("而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。")]),e._v(" "),t("li",[e._v("最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("参考资料：")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack HMR 原理解析"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30623057",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack 热更新实现原理分析"),t("OutboundLink")],1)])])])},[],!1,null,null,null);r.default=v.exports}}]);